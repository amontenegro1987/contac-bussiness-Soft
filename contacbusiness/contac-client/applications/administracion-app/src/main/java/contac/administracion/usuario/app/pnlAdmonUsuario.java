/**
 * Copyright 2011 Contac Business Software. All rights reserved.
 * CONTAC PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 */

/*
 * pnlAdmonUsuario.java
 *
 * Created on Jul 29, 2011, 10:29:39 AM
 */
package contac.administracion.usuario.app;

import contac.administracion.controller.AdministraUsuarioController;
import contac.commons.form.label.JOptionErrorPane;
import contac.commons.form.panel.GenericFrame;
import contac.commons.form.panel.GenericPanel;
import contac.commons.models.comboBox.AlmacenComboBoxModel;
import contac.commons.models.comboBox.ComboBoxEmptySelectionRenderer;
import contac.commons.models.comboBox.CompaniaComboBoxModel;
import contac.commons.models.tables.BeanTableModel;
import contac.internationalization.LanguageLocale;
import contac.modelo.entity.Almacen;
import contac.modelo.entity.Compania;
import contac.modelo.entity.Usuario;
import contac.text.TextUtil;
import org.apache.log4j.Logger;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.TableColumnModel;
import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.util.Locale;
import java.util.ResourceBundle;

/**
 * @author Eddy Montenegro
 */
public class pnlAdmonUsuario extends GenericPanel {

    //Logger
    private static final Logger logger = Logger.getLogger(pnlAdmonUsuario.class);

    //Variable de edicion de registros
    private boolean edit = false;

    //Message Resource Bundle
    private ResourceBundle messageBundle = ResourceBundle.getBundle("contac/administracion/app/mensajes/Mensajes",
            LanguageLocale.getInstance().getLocale());

    //Controller
    private AdministraUsuarioController controller;

    /**
     * Creates new form pnlAdmonUsuario
     */
    public pnlAdmonUsuario(GenericFrame frame) {

        //Call super constructor
        super(frame, "administraUsuarios", "Administrar Usuarios", true, "contac/administracion/app/mensajes/Mensajes",
                new Locale("es", "NIC"));

        try {

            //Init controller
            controller = new AdministraUsuarioController();

            //Init components
            initComponents();

            //Init controller
            controller.init();

            //Init values
            initValues();

            //Register listeners
            registerListeners();

        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            //Show confirmation message
            JOptionErrorPane.showMessageInfo(null, messageBundle.getString("CONTAC.FORM.ADMINISTRAUSUARIOS.ERROR.INIT"),
                    e.getMessage());
        }
    }

    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        usuarioHeader = new org.jdesktop.swingx.JXHeader();
        pnlUsuariosForm = new javax.swing.JPanel();
        pnlRegistroUsuario = new javax.swing.JPanel();
        pnlListadoUsuarioForm = new javax.swing.JPanel();
        scrollRegistroUsuarios = new javax.swing.JScrollPane();
        tblRegistroUsuarios = new javax.swing.JTable();
        pnlUsuarioForm = new javax.swing.JPanel();
        pnlMantenimientoUsuariosForm = new javax.swing.JPanel();
        btnAceptar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        pnlFormulario = new javax.swing.JPanel();
        chkActivo = new javax.swing.JCheckBox();
        cmbAlmacen = new javax.swing.JComboBox();
        cmbCompania = new javax.swing.JComboBox();
        lblAlmacen = new javax.swing.JLabel();
        lblCompania = new javax.swing.JLabel();
        lblConfirmaContrasenia = new javax.swing.JLabel();
        txtConfirmaContrasenia = new javax.swing.JPasswordField();
        txtContrasenia = new javax.swing.JPasswordField();
        txtContraseniaDescuento = new javax.swing.JPasswordField();
        lblContrasenia = new javax.swing.JLabel();
        lblContraseniaDescuento = new javax.swing.JLabel();
        chkCambiaContrasenia = new javax.swing.JCheckBox();
        txtNombreUsuario = new javax.swing.JTextField();
        lblNombreUsuario = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        pnlRoles = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblRoles = new javax.swing.JTable();

        setLayout(new java.awt.BorderLayout());

        usuarioHeader.setForeground(new java.awt.Color(255, 153, 0));
        usuarioHeader.setPreferredSize(new java.awt.Dimension(51, 35));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("contac/administracion/app/mensajes/Mensajes_es"); // NOI18N
        usuarioHeader.setTitle(bundle.getString("CONTAC.FORM.ADMINISTRAUSUARIO")); // NOI18N
        usuarioHeader.setTitleForeground(new java.awt.Color(255, 153, 0));
        add(usuarioHeader, java.awt.BorderLayout.NORTH);

        pnlUsuariosForm.setPreferredSize(new java.awt.Dimension(700, 475));
        pnlUsuariosForm.setLayout(new java.awt.BorderLayout());

        pnlRegistroUsuario.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlRegistroUsuario.setPreferredSize(new java.awt.Dimension(300, 475));
        pnlRegistroUsuario.setLayout(new java.awt.BorderLayout());

        pnlListadoUsuarioForm.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("CONTAC.FORM.ADMINISTRAUSUARIO.REGISTRO"))); // NOI18N
        pnlListadoUsuarioForm.setLayout(new java.awt.BorderLayout());

        tblRegistroUsuarios.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblRegistroUsuariosMouseClicked(evt);
            }
        });
        scrollRegistroUsuarios.setViewportView(tblRegistroUsuarios);

        pnlListadoUsuarioForm.add(scrollRegistroUsuarios, java.awt.BorderLayout.CENTER);

        pnlRegistroUsuario.add(pnlListadoUsuarioForm, java.awt.BorderLayout.CENTER);

        pnlUsuariosForm.add(pnlRegistroUsuario, java.awt.BorderLayout.WEST);

        pnlUsuarioForm.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        pnlUsuarioForm.setPreferredSize(new java.awt.Dimension(400, 475));
        pnlUsuarioForm.setLayout(new java.awt.BorderLayout());

        pnlMantenimientoUsuariosForm.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("CONTAC.FORM.ADMINISTRAUSUARIO.MANTENIMIENTO"))); // NOI18N

        btnAceptar.setText(bundle.getString("CONTAC.FORM.ADMINISTRAALMACENES.BTNACCEPTAR")); // NOI18N
        btnAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAceptarActionPerformed(evt);
            }
        });

        btnCancelar.setText(bundle.getString("CONTAC.FORM.ADMINISTRAALMACENES.BTNCANCELAR")); // NOI18N
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        chkActivo.setText(bundle.getString("CONTAC.FORM.ADMINISTRAUSUARIO.ESTADO")); // NOI18N

        cmbAlmacen.setModel(new AlmacenComboBoxModel(controller.getAlmacenes()));

        cmbCompania.setModel(new CompaniaComboBoxModel(controller.getCompanias()));
        cmbCompania.setMinimumSize(new java.awt.Dimension(50, 18));
        cmbCompania.setPreferredSize(new java.awt.Dimension(50, 20));

        lblAlmacen.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblAlmacen.setText(bundle.getString("CONTAC.FORM.ADMINISTRAUSUARIO.ALMACEN")); // NOI18N
        lblAlmacen.setPreferredSize(new java.awt.Dimension(89, 20));

        lblCompania.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblCompania.setText(bundle.getString("CONTAC.FORM.ADMINISTRAUSUARIO.COMPANIA")); // NOI18N
        lblCompania.setPreferredSize(new java.awt.Dimension(89, 20));

        lblConfirmaContrasenia.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblConfirmaContrasenia.setText(bundle.getString("CONTAC.FORM.ADMINISTRAUSUARIO.CONTRASENIACONFIRMAR")); // NOI18N
        lblConfirmaContrasenia.setPreferredSize(new java.awt.Dimension(89, 20));

        txtContrasenia.setAutoscrolls(false);
        txtContraseniaDescuento.setAutoscrolls(false);

        lblContrasenia.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblContrasenia.setText(bundle.getString("CONTAC.FORM.ADMINISTRAUSUARIO.CONTRASENIA")); // NOI18N
        lblContrasenia.setPreferredSize(new java.awt.Dimension(89, 20));

        lblContraseniaDescuento.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblContraseniaDescuento.setText(bundle.getString("CONTAC.FORM.ADMINISTRAUSUARIO.CONTRASENIADESCUENTO")); // NOI18N
        lblContraseniaDescuento.setPreferredSize(new java.awt.Dimension(89, 20));

        chkCambiaContrasenia.setText(bundle.getString("CONTAC.FORM.ADMINISTRAUSUARIO.CAMBIACONTRASENIA")); // NOI18N
        chkCambiaContrasenia.setAutoscrolls(true);
        chkCambiaContrasenia.setEnabled(false);

        txtNombreUsuario.setHorizontalAlignment(javax.swing.JTextField.LEFT);

        lblNombreUsuario.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblNombreUsuario.setText(bundle.getString("CONTAC.FORM.ADMINISTRAUSUARIO.NOMBREUSUARIO")); // NOI18N
        lblNombreUsuario.setAutoscrolls(true);
        lblNombreUsuario.setPreferredSize(new java.awt.Dimension(89, 20));

        pnlRoles.setBorder(javax.swing.BorderFactory.createTitledBorder(bundle.getString("CONTAC.FORM.ADMINSITRAUSUARIO.ROLES"))); // NOI18N

        jScrollPane1.setViewportView(tblRoles);

        javax.swing.GroupLayout pnlRolesLayout = new javax.swing.GroupLayout(pnlRoles);
        pnlRoles.setLayout(pnlRolesLayout);
        pnlRolesLayout.setHorizontalGroup(
                pnlRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 468, Short.MAX_VALUE)
                        .addGroup(pnlRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(pnlRolesLayout.createSequentialGroup()
                                        .addContainerGap()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 448, Short.MAX_VALUE)
                                        .addContainerGap()))
        );
        pnlRolesLayout.setVerticalGroup(
                pnlRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 158, Short.MAX_VALUE)
                        .addGroup(pnlRolesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(pnlRolesLayout.createSequentialGroup()
                                        .addGap(1, 1, 1)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 146, Short.MAX_VALUE)
                                        .addContainerGap()))
        );

        javax.swing.GroupLayout pnlFormularioLayout = new javax.swing.GroupLayout(pnlFormulario);
        pnlFormulario.setLayout(pnlFormularioLayout);
        pnlFormularioLayout.setHorizontalGroup(
                pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlFormularioLayout.createSequentialGroup()
                                .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pnlFormularioLayout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(lblNombreUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtNombreUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(pnlFormularioLayout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(lblCompania, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(10, 10, 10)
                                                .addComponent(cmbCompania, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(pnlFormularioLayout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlFormularioLayout.createSequentialGroup()
                                                                .addComponent(lblContrasenia, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(6, 6, 6)
                                                                .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                        .addComponent(txtContrasenia, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(chkCambiaContrasenia)))
                                                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, pnlFormularioLayout.createSequentialGroup()
                                                                .addComponent(lblConfirmaContrasenia, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addGap(10, 10, 10)
                                                                .addComponent(txtConfirmaContrasenia, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addGroup(pnlFormularioLayout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(lblContraseniaDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(10, 10, 10)
                                                .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(txtContraseniaDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGroup(pnlFormularioLayout.createSequentialGroup()
                                                .addGap(10, 10, 10)
                                                .addComponent(lblAlmacen, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(10, 10, 10)
                                                .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(chkActivo)
                                                        .addComponent(cmbAlmacen, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGap(64, 64, 64))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlFormularioLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(pnlRoles, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGroup(pnlFormularioLayout.createSequentialGroup()
                                .addContainerGap()
                                //.addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 480, Short.MAX_VALUE)
                        )
        );
        pnlFormularioLayout.setVerticalGroup(
                pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlFormularioLayout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(lblNombreUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(txtNombreUsuario, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(6, 6, 6)
                                .addComponent(chkCambiaContrasenia)
                                .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pnlFormularioLayout.createSequentialGroup()
                                                .addGap(8, 8, 8)
                                                .addComponent(lblContrasenia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        )

                                        .addGroup(pnlFormularioLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtContrasenia, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pnlFormularioLayout.createSequentialGroup()
                                                .addGap(7, 7, 7)
                                                .addComponent(lblConfirmaContrasenia, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(pnlFormularioLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(txtConfirmaContrasenia, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pnlFormularioLayout.createSequentialGroup()
                                                .addGap(8, 8, 8)
                                                .addComponent(lblContraseniaDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        )
                                        .addGroup(pnlFormularioLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(txtContraseniaDescuento, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))


                                .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pnlFormularioLayout.createSequentialGroup()
                                                .addGap(7, 7, 7)
                                                .addComponent(lblCompania, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(pnlFormularioLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cmbCompania, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGroup(pnlFormularioLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(pnlFormularioLayout.createSequentialGroup()
                                                .addGap(7, 7, 7)
                                                .addComponent(lblAlmacen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(pnlFormularioLayout.createSequentialGroup()
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(cmbAlmacen, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(chkActivo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        //.addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pnlRoles, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout pnlMantenimientoUsuariosFormLayout = new javax.swing.GroupLayout(pnlMantenimientoUsuariosForm);
        pnlMantenimientoUsuariosForm.setLayout(pnlMantenimientoUsuariosFormLayout);
        pnlMantenimientoUsuariosFormLayout.setHorizontalGroup(
                pnlMantenimientoUsuariosFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlMantenimientoUsuariosFormLayout.createSequentialGroup()
                                .addGroup(pnlMantenimientoUsuariosFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlMantenimientoUsuariosFormLayout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(pnlFormulario, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                        .addGroup(pnlMantenimientoUsuariosFormLayout.createSequentialGroup()
                                                .addGap(183, 183, 183)
                                                .addComponent(btnAceptar)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(btnCancelar))
                                )
                                .addContainerGap())
        );

        pnlMantenimientoUsuariosFormLayout.setVerticalGroup(
                pnlMantenimientoUsuariosFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlMantenimientoUsuariosFormLayout.createSequentialGroup()
                                .addComponent(pnlFormulario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        //.addGap(18, 18, 18)
                                .addGroup(pnlMantenimientoUsuariosFormLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(btnAceptar)
                                        .addComponent(btnCancelar))
                                //.addContainerGap(14, Short.MAX_VALUE)
                        )
        );


        pnlUsuarioForm.add(pnlMantenimientoUsuariosForm, java.awt.BorderLayout.CENTER);

        pnlUsuariosForm.add(pnlUsuarioForm, java.awt.BorderLayout.CENTER);

        add(pnlUsuariosForm, java.awt.BorderLayout.CENTER);
    }// </editor-fold>//GEN-END:initComponents

    private void registerListeners() { //BEGIN: Register listeners

        //*****************************************************************************
        //<Register listeners>
        //*****************************************************************************

        //<txtNombreUsuario>
        txtNombreUsuario.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                if (!TextUtil.isValidCharacter(e.getKeyChar())) {
                    e.consume();
                }

                if (e.VK_ENTER == e.getKeyChar()) {
                    txtContrasenia.requestFocusInWindow();
                }
            }
        });

        //<txtContrasenia>
        txtContrasenia.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                if (e.VK_ENTER == e.getKeyChar()) {
                    txtConfirmaContrasenia.requestFocusInWindow();
                }
            }
        });

        //<txtConfirmaContrasenia>
        txtConfirmaContrasenia.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                if (e.VK_ENTER == e.getKeyChar()) {
                    txtContraseniaDescuento.requestFocusInWindow();
                }
            }
        });

        //<txtContraseniaDescuento>
        txtContraseniaDescuento.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                if (e.VK_ENTER == e.getKeyChar()) {
                    cmbCompania.requestFocusInWindow();
                }
            }
        });


        //<cmbCompania>
        cmbCompania.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                if (e.VK_ENTER == e.getKeyChar()) {
                    chkActivo.requestFocusInWindow();
                }
            }
        });

        //<chkCambiaContrasenia>
        chkCambiaContrasenia.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                JCheckBox checkBox = (JCheckBox) e.getSource();

                if (checkBox.isSelected()) {
                    txtContrasenia.setEditable(true);
                    txtConfirmaContrasenia.setEditable(true);

                    controller.setCambiarContrasenia(true);
                }

                if (!checkBox.isSelected()) {
                    txtContrasenia.setEditable(false);
                    txtConfirmaContrasenia.setEditable(false);

                    controller.setCambiarContrasenia(false);
                }
            }
        });

        //<chkActivo>
        chkActivo.addKeyListener(new KeyAdapter() {
            @Override
            public void keyTyped(KeyEvent e) {
                if (e.VK_ENTER == e.getKeyChar()) {
                    tblRoles.requestFocusInWindow();
                }
            }
        });

    } //END: Register listeners

    @Override
    public void initValues() {

        try {

            //Compania comboBox
            ListCellRenderer rendererCompania = new ComboBoxEmptySelectionRenderer(cmbCompania,
                    messageBundle.getString("CONTAC.FORM.MSG.SELECCIONE"));
            if (controller.getCompania() != null) {
                CompaniaComboBoxModel model = (CompaniaComboBoxModel) cmbCompania.getModel();
                cmbCompania.setRenderer(rendererCompania);
                cmbCompania.setSelectedItem(model.searchSelectedItem(controller.getCompania().getId()));
            } else {
                cmbCompania.setRenderer(rendererCompania);
                cmbCompania.setSelectedIndex(-1);
            }

            //Almacen comboBox
            ListCellRenderer rendererAlmacen = new ComboBoxEmptySelectionRenderer(cmbAlmacen,
                    messageBundle.getString("CONTAC.FORM.MSG.SELECCIONE"));
            if (controller.getAlmacen() != null) {
                AlmacenComboBoxModel model = (AlmacenComboBoxModel) cmbAlmacen.getModel();
                cmbAlmacen.setRenderer(rendererAlmacen);
                cmbAlmacen.setSelectedItem(model.searchSelectedItem(controller.getAlmacen().getId()));
            } else {
                cmbAlmacen.setRenderer(rendererAlmacen);
                cmbAlmacen.setSelectedIndex(-1);
            }

            //Init listado de usuarios registrados
            usuarioBeanTableModel = new BeanTableModel<Usuario>(Usuario.class, controller.getUsuarios());
            usuarioBeanTableModel.setModelEditable(false);
            usuarioBeanTableModel.sortColumnNames();
            tblRegistroUsuarios.setModel(usuarioBeanTableModel);
            tblRegistroUsuarios.setRowSelectionAllowed(true);

            //Obteniendo table column model y removiendo columnas innecesarias
            TableColumnModel usuarioColumnModel = tblRegistroUsuarios.getColumnModel();
            String[] usuarioColumnsRemove = new String[]{"Compania", "Almacen", "Ctime", "Cuser", "Mtime", "Muser", "Password", "Password Descuento"};

            for (String columnLabel : usuarioColumnsRemove) {
                usuarioColumnModel.removeColumn(usuarioColumnModel.getColumn(usuarioColumnModel.getColumnIndex(columnLabel)));
            }

            //Init listado de roles registrados
            rolBeanTableModel = new BeanTableModel<RolesActivoApp>(RolesActivoApp.class, controller.getRoles());
            rolBeanTableModel.setModelEditable(false);
            rolBeanTableModel.sortColumnNames();
            tblRoles.setModel(rolBeanTableModel);
            tblRoles.setRowSelectionAllowed(true);

            //Obteniendo table column model y removiendo columnas innecesarias
            TableColumnModel rolColumnModel = tblRoles.getColumnModel();
            String[] rolColumnsRemove = new String[]{"Id", "Entity"};

            for (String columnLabel : rolColumnsRemove) {
                rolColumnModel.removeColumn(rolColumnModel.getColumn(rolColumnModel.getColumnIndex(columnLabel)));
            }

            //Setting focus
            txtNombreUsuario.requestFocusInWindow();

        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            //Show confirmation message
            JOptionErrorPane.showMessageError(null, messageBundle.getString("CONTAC.FORM.ADMINISTRAUSUARIOS.ERROR.INIT"),
                    e.getMessage());
        }
    }

    //Cargar registro de datos
    private void cargarDatos() {

        txtNombreUsuario.setText(controller.getNombreUsuario());
        txtContrasenia.setText(controller.getContrasenia());
        txtConfirmaContrasenia.setText(controller.getConfirmaContrasenia());
        txtContraseniaDescuento.setText(controller.getContraseniaDescuento());
        chkActivo.setSelected(controller.isActivo());

        if (controller.getCompania() != null) {
            cmbCompania.setSelectedItem(((CompaniaComboBoxModel) cmbCompania.getModel()).searchSelectedItem(controller.getCompania().getId()));
        } else {
            cmbCompania.setSelectedIndex(-1);
        }

        if (controller.getAlmacen() != null) {
            cmbAlmacen.setSelectedItem(((AlmacenComboBoxModel)cmbAlmacen.getModel()).searchSelectedItem(controller.getAlmacen().getId()));
        } else {
            cmbAlmacen.setSelectedIndex(-1);
        }

        //Load tabla de roles
        ((BeanTableModel) tblRoles.getModel()).fireTableDataChanged();

        //Setting username not enabled
        txtNombreUsuario.setEditable(false);
        chkCambiaContrasenia.setSelected(false);
        chkCambiaContrasenia.setEnabled(true);
        txtContrasenia.setText("");
        txtConfirmaContrasenia.setText("");
        txtContraseniaDescuento.setText("");
    }

    private void btnAceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAceptarActionPerformed

        try {

            //Validar datos form
            validaDatosForm();
            char[] input = txtContraseniaDescuento.getPassword();

            //throw new Exception(String.valueOf(input));
            //Registrar datos en el controller
            controller.setNombreUsuario(txtNombreUsuario.getText());
            controller.setCambiarContrasenia(chkCambiaContrasenia.isSelected());
            controller.setContrasenia(new String(txtContrasenia.getPassword()));
            controller.setConfirmaContrasenia(txtConfirmaContrasenia.getPassword().toString());
            controller.setContraseniaDescuento(String.valueOf(input));
            //controller.setContraseniaDescuento(txtContraseniaDescuento.getPassword().toStri       
            
            controller.setCompania(((CompaniaComboBoxModel) cmbCompania.getModel()).getSelectedItem() != null ?
                    (Compania) ((CompaniaComboBoxModel) cmbCompania.getModel()).getSelectedItem().getObject() : null);
            controller.setAlmacen(((AlmacenComboBoxModel) cmbAlmacen.getModel()).getSelectedItem() != null ?
                    (Almacen) ((AlmacenComboBoxModel) cmbAlmacen.getModel()).getSelectedItem().getObject() : null);
            controller.setActivo(chkActivo.isSelected());

            if (!edit) {
                //Ingresar nuevo usuario
                controller.registrarUsuario();

                //Show confirmation message
                JOptionErrorPane.showMessageInfo(null, messageBundle.getString("CONTAC.FORM.ADMINISTRAUSUARIOS.INGRESO.EXITOSO"),
                        messageBundle.getString("CONTAC.FORM.ADMINISTRAUSUARIOS.INGRESO.EXITOSO"));
            }

            if (edit) {
                //Modificar usuario existente
                controller.modificarUsuario();

                //Show confirmation message
                JOptionErrorPane.showMessageInfo(null, messageBundle.getString("CONTAC.FORM.ADMINISTRAUSUARIOS.MODIFICA.EXITOSO"),
                        messageBundle.getString("CONTAC.FORM.ADMINISTRAUSUARIOS.MODIFICA.EXITOSO"));

                //Change btnAceptar label
                btnAceptar.setText(messageBundle.getString("CONTAC.FORM.BTNACEPTAR"));
            }

            //Actualizar listado de usuarios
            txtNombreUsuario.setEditable(true);
            chkCambiaContrasenia.setSelected(false);
            chkCambiaContrasenia.setEnabled(false);
            ((BeanTableModel) tblRegistroUsuarios.getModel()).fireTableDataChanged();

            //Limpiar formulario
            btnCancelarActionPerformed(evt);

        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            //Show confirmation message
            JOptionErrorPane.showMessageInfo(null, messageBundle.getString("CONTAC.FORM.ADMINISTRAUSUARIOS"),
                    e.getMessage());
            //Setting focus
            txtNombreUsuario.requestFocusInWindow();
            txtNombreUsuario.selectAll();
        }
    }//GEN-LAST:event_btnAceptarActionPerformed

    private void tblRegistroUsuariosMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblRegistroUsuariosMouseClicked

        try {
            //Getting user selected
            int rowSelected = tblRegistroUsuarios.getSelectedRow();
            controller.setUsuario((Usuario) ((BeanTableModel) tblRegistroUsuarios.getModel()).getRow(rowSelected));

            //Init modificacion value
            controller.initModificacion();

            //Set editable true
            edit = true;

            //Load datas
            cargarDatos();

            //Change btnAceptar label
            btnAceptar.setText(messageBundle.getString("CONTAC.FORM.BTNMODIFICAR"));

            //Setting focus
            txtContrasenia.requestFocusInWindow();

        } catch (Exception e) {
            logger.error(e.getMessage(), e);
            //Show confirmation message
            JOptionErrorPane.showMessageInfo(null, messageBundle.getString("CONTAC.FORM.ADMINISTRAUSUARIOS.ERROR.INIT"),
                    e.getMessage());
        }

    }//GEN-LAST:event_tblRegistroUsuariosMouseClicked

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        //Limpiar datos formulario
        controller.limpiar();

        //Limpiar componentes
        txtNombreUsuario.setText(controller.getNombreUsuario());
        txtContrasenia.setText(controller.getContrasenia());
        txtConfirmaContrasenia.setText(controller.getConfirmaContrasenia());
        txtContraseniaDescuento.setText("");
        cmbCompania.setSelectedItem(null);
        cmbCompania.setSelectedIndex(-1);
        cmbAlmacen.setSelectedItem(null);
        cmbAlmacen.setSelectedIndex(-1);
        chkActivo.setSelected(controller.isActivo());

        //Enabled <txtNombreUsuario>
        txtNombreUsuario.setEditable(true);
        chkCambiaContrasenia.setSelected(false);
        chkCambiaContrasenia.setEnabled(false);
        txtContrasenia.setEditable(true);
        txtConfirmaContrasenia.setEditable(true);
        txtContraseniaDescuento.setEditable(true);

        //Fire table roles changed
        ((BeanTableModel) tblRoles.getModel()).fireTableDataChanged();

        //Set editable false
        edit = false;

        //Change btnAceptar label
        btnAceptar.setText(messageBundle.getString("CONTAC.FORM.BTNACEPTAR"));

        //Set focus <txtNombreUsuario>
        txtNombreUsuario.requestFocusInWindow();

    }//GEN-LAST:event_btnCancelarActionPerformed

    //<Valida datos formulario>
    private void validaDatosForm() throws Exception {

        //Nombre usuario
        if (txtNombreUsuario.getText().equals("")) {
            //Request focus
            txtNombreUsuario.requestFocusInWindow();
            txtNombreUsuario.selectAll();
            //Throw error message
            throw new Exception(messageBundle.getString("CONTAC.FORM.ADMINISTRAUSUARIOS.NOMBREUSUARIO.VALIDA"));
        }

        //Contrasenia
        if (!this.edit && txtContrasenia.getPassword().length <= 0) {
            //Request focus
            txtContrasenia.requestFocusInWindow();
            txtContrasenia.selectAll();
            //Throw error message
            throw new Exception(messageBundle.getString("CONTAC.FORM.ADMINISTRAUSUARIOS.CONTRASENIA.VALIDA"));
        }

        //Confirma contrasenia
        if (!this.edit && txtConfirmaContrasenia.getPassword().length <= 0) {
            //Request focus
            txtConfirmaContrasenia.requestFocusInWindow();
            txtConfirmaContrasenia.selectAll();
            //Throw error message
            throw new Exception(messageBundle.getString("CONTAC.FORM.ADMINISTRAUSUARIOS.CONFIRMARCONTRASENIA.VALIDA"));
        }

        //Evaluar contrasenia equals confirma contrasenia
        String contrasenia = new String(txtContrasenia.getPassword());
        String confirmaContrasenia = new String(txtConfirmaContrasenia.getPassword());

        if (!contrasenia.equals(confirmaContrasenia)) {
            //Request focus
            txtConfirmaContrasenia.requestFocusInWindow();
            txtConfirmaContrasenia.selectAll();
            //Throw error message
            throw new Exception(messageBundle.getString("CONTAC.FORM.ADMINISTRAUSUARIOS.CONTRASENIA.CONFIRMA.VALIDA"));
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAceptar;
    private javax.swing.JButton btnCancelar;
    private javax.swing.JCheckBox chkActivo;
    private javax.swing.JCheckBox chkCambiaContrasenia;
    private javax.swing.JComboBox cmbAlmacen;
    private javax.swing.JComboBox cmbCompania;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblAlmacen;
    private javax.swing.JLabel lblCompania;
    private javax.swing.JLabel lblConfirmaContrasenia;
    private javax.swing.JLabel lblContrasenia;
    private javax.swing.JLabel lblContraseniaDescuento;
    private javax.swing.JLabel lblNombreUsuario;
    private javax.swing.JPanel pnlFormulario;
    private javax.swing.JPanel pnlListadoUsuarioForm;
    private javax.swing.JPanel pnlMantenimientoUsuariosForm;
    private javax.swing.JPanel pnlRegistroUsuario;
    private javax.swing.JPanel pnlRoles;
    private javax.swing.JPanel pnlUsuarioForm;
    private javax.swing.JPanel pnlUsuariosForm;
    private javax.swing.JScrollPane scrollRegistroUsuarios;
    private javax.swing.JTable tblRegistroUsuarios;
    private javax.swing.JTable tblRoles;
    private javax.swing.JPasswordField txtConfirmaContrasenia;
    private javax.swing.JPasswordField txtContrasenia;
    private javax.swing.JPasswordField txtContraseniaDescuento;
    private javax.swing.JTextField txtNombreUsuario;
    private org.jdesktop.swingx.JXHeader usuarioHeader;
    // End of variables declaration//GEN-END:variables

    private BeanTableModel<Usuario> usuarioBeanTableModel;
    private BeanTableModel<RolesActivoApp> rolBeanTableModel;
}
